{"ast":null,"code":"import { checkCollision } from '../utils/formulas';\nimport { gameHeight } from '../utils/constants';\nconst checkCollisions = (cannonBalls, flyingDiscs) => {\n  const objectsDestroyed = [];\n  flyingDiscs.forEach(flyingDisc => {\n    const currentLifeTime = new Date().getTime() - flyingDisc.createdAt;\n    const calculatedPosition = {\n      x: flyingDisc.position.x,\n      y: flyingDisc.position.y + currentLifeTime / 4000 * gameHeight\n    };\n    const rectA = {\n      x1: calculatedPosition.x - 40,\n      y1: calculatedPosition.y - 10,\n      x2: calculatedPosition.x + 40,\n      y2: calculatedPosition.y + 10\n    };\n    cannonBalls.forEach(cannonBall => {\n      const rectB = {\n        x1: cannonBall.position.x - 8,\n        y1: cannonBall.position.y - 8,\n        x2: cannonBall.position.x + 8,\n        y2: cannonBall.position.y + 8\n      };\n      if (checkCollision(rectA, rectB)) {\n        objectsDestroyed.push({\n          cannonBallId: cannonBall.id,\n          flyingDiscId: flyingDisc.id\n        });\n      }\n    });\n  });\n  return objectsDestroyed;\n};\nexport default checkCollisions;","map":{"version":3,"names":["checkCollision","gameHeight","checkCollisions","cannonBalls","flyingDiscs","objectsDestroyed","forEach","flyingDisc","currentLifeTime","Date","getTime","createdAt","calculatedPosition","x","position","y","rectA","x1","y1","x2","y2","cannonBall","rectB","push","cannonBallId","id","flyingDiscId"],"sources":["C:/Users/dibya/OneDrive/Desktop/VS code/aliens-go-home/src/reducers/checkCollisions.js"],"sourcesContent":["import { checkCollision } from '../utils/formulas';\r\nimport { gameHeight } from '../utils/constants';\r\n\r\nconst checkCollisions = (cannonBalls, flyingDiscs) => {\r\n  const objectsDestroyed = [];\r\n  flyingDiscs.forEach((flyingDisc) => {\r\n    const currentLifeTime = (new Date()).getTime() - flyingDisc.createdAt;\r\n    const calculatedPosition = {\r\n      x: flyingDisc.position.x,\r\n      y: flyingDisc.position.y + ((currentLifeTime / 4000) * gameHeight),\r\n    };\r\n    const rectA = {\r\n      x1: calculatedPosition.x - 40,\r\n      y1: calculatedPosition.y - 10,\r\n      x2: calculatedPosition.x + 40,\r\n      y2: calculatedPosition.y + 10,\r\n    };\r\n    cannonBalls.forEach((cannonBall) => {\r\n      const rectB = {\r\n        x1: cannonBall.position.x - 8,\r\n        y1: cannonBall.position.y - 8,\r\n        x2: cannonBall.position.x + 8,\r\n        y2: cannonBall.position.y + 8,\r\n      };\r\n      if (checkCollision(rectA, rectB)) {\r\n        objectsDestroyed.push({\r\n          cannonBallId: cannonBall.id,\r\n          flyingDiscId: flyingDisc.id,\r\n        });\r\n      }\r\n    });\r\n  });\r\n  return objectsDestroyed;\r\n};\r\n\r\nexport default checkCollisions;"],"mappings":"AAAA,SAASA,cAAc,QAAQ,mBAAmB;AAClD,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,MAAMC,eAAe,GAAGA,CAACC,WAAW,EAAEC,WAAW,KAAK;EACpD,MAAMC,gBAAgB,GAAG,EAAE;EAC3BD,WAAW,CAACE,OAAO,CAAEC,UAAU,IAAK;IAClC,MAAMC,eAAe,GAAI,IAAIC,IAAI,EAAE,CAAEC,OAAO,EAAE,GAAGH,UAAU,CAACI,SAAS;IACrE,MAAMC,kBAAkB,GAAG;MACzBC,CAAC,EAAEN,UAAU,CAACO,QAAQ,CAACD,CAAC;MACxBE,CAAC,EAAER,UAAU,CAACO,QAAQ,CAACC,CAAC,GAAKP,eAAe,GAAG,IAAI,GAAIP;IACzD,CAAC;IACD,MAAMe,KAAK,GAAG;MACZC,EAAE,EAAEL,kBAAkB,CAACC,CAAC,GAAG,EAAE;MAC7BK,EAAE,EAAEN,kBAAkB,CAACG,CAAC,GAAG,EAAE;MAC7BI,EAAE,EAAEP,kBAAkB,CAACC,CAAC,GAAG,EAAE;MAC7BO,EAAE,EAAER,kBAAkB,CAACG,CAAC,GAAG;IAC7B,CAAC;IACDZ,WAAW,CAACG,OAAO,CAAEe,UAAU,IAAK;MAClC,MAAMC,KAAK,GAAG;QACZL,EAAE,EAAEI,UAAU,CAACP,QAAQ,CAACD,CAAC,GAAG,CAAC;QAC7BK,EAAE,EAAEG,UAAU,CAACP,QAAQ,CAACC,CAAC,GAAG,CAAC;QAC7BI,EAAE,EAAEE,UAAU,CAACP,QAAQ,CAACD,CAAC,GAAG,CAAC;QAC7BO,EAAE,EAAEC,UAAU,CAACP,QAAQ,CAACC,CAAC,GAAG;MAC9B,CAAC;MACD,IAAIf,cAAc,CAACgB,KAAK,EAAEM,KAAK,CAAC,EAAE;QAChCjB,gBAAgB,CAACkB,IAAI,CAAC;UACpBC,YAAY,EAAEH,UAAU,CAACI,EAAE;UAC3BC,YAAY,EAAEnB,UAAU,CAACkB;QAC3B,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOpB,gBAAgB;AACzB,CAAC;AAED,eAAeH,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}